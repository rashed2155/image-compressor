{"version":3,"sources":["component/ImageCompressor.jsx","App.js","serviceWorker.js","index.js"],"names":["imageCompressor","handle","e","imageFile","target","files","setState","originalLink","URL","createObjectURL","originalImage","outputFileName","name","uploadImage","changeValue","value","click","preventDefault","output","options","maxSizeMB","maxWidthOrHeight","useWebWorker","state","size","alert","imageCompression","then","x","downloadLink","compressedLink","clicked","className","this","Card","Img","variant","src","type","accept","onChange","onClick","href","download","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"qUAQqBA,G,wDACjB,aAAe,IAAD,8BACV,gBAWJC,OAAS,SAAAC,GACL,IAAMC,EAAYD,EAAEE,OAAOC,MAAM,GACjC,EAAKC,SAAS,CACVC,aAAcC,IAAIC,gBAAgBN,GAClCO,cAAeP,EACfQ,eAAgBR,EAAUS,KAC1BC,aAAa,KAlBP,EAsBdC,YAAc,SAAAZ,GACV,EAAKI,SAAL,eAAiBJ,EAAEE,OAAOQ,KAAOV,EAAEE,OAAOW,SAvBhC,EA0BdC,MAAQ,SAAAd,GACJA,EAAEe,iBAEF,IAWIC,EAXEC,EAAU,CACZC,UAAW,EACXC,iBAAkB,IAClBC,cAAc,GAGlB,OAAIH,EAAQC,WAAa,EAAKG,MAAMb,cAAcc,KAAO,MACrDC,MAAM,4CACC,IAIXC,YAAiB,EAAKH,MAAMb,cAAeS,GAASQ,MAAK,SAAAC,GACrDV,EAASU,EAET,IAAMC,EAAerB,IAAIC,gBAAgBS,GACzC,EAAKZ,SAAS,CACVwB,eAAgBD,OAIxB,EAAKvB,SAAS,CAAEyB,SAAS,IAClB,IAjDP,EAAKR,MAAQ,CACTO,eACI,qEACJpB,cAAe,GACfH,aAAc,GACdwB,SAAS,EACTlB,aAAa,GARP,E,qDAsDJ,IAAD,OACL,OACI,yBAAKmB,UAAU,YACX,yBAAKA,UAAU,yBACX,kDACA,+CACA,oDACA,6DAGJ,yBAAKA,UAAU,YACX,yBAAKA,UAAU,yCACVC,KAAKV,MAAMV,YACR,kBAACqB,EAAA,EAAKC,IAAN,CACIH,UAAU,KACVI,QAAQ,MACRC,IAAKJ,KAAKV,MAAMhB,eAGhB,kBAAC2B,EAAA,EAAKC,IAAN,CACIH,UAAU,KACVI,QAAQ,MACRC,IAAI,uEAGhB,yBAAKL,UAAU,iCACX,2BACIM,KAAK,OACLC,OAAO,UACPP,UAAU,yBACVQ,SAAU,SAAAtC,GAAC,OAAI,EAAKD,OAAOC,QAIvC,yBAAK8B,UAAU,sGACX,6BACCC,KAAKV,MAAMZ,eACR,4BACI2B,KAAK,SACLN,UAAU,gBACVS,QAAS,SAAAvC,GAAC,OAAI,EAAKc,MAAMd,KAH7B,YAQI,sCAIZ,yBAAK8B,UAAU,8CACX,kBAACE,EAAA,EAAKC,IAAN,CAAUC,QAAQ,MAAMC,IAAKJ,KAAKV,MAAMO,iBACvCG,KAAKV,MAAMQ,QACR,yBAAKC,UAAU,iCACX,uBACIU,KAAMT,KAAKV,MAAMO,eACjBa,SAAUV,KAAKV,MAAMZ,eACrBqB,UAAU,0BAHd,aASA,4C,GArHaY,IAAMC,YCDpCC,EAFH,kBAAM,kBAAC,EAAD,OCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d0f85f7c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./color.css\";\r\n\r\nimport imageCompression from \"browser-image-compression\";\r\n\r\nimport Card from \"react-bootstrap/Card\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nexport default class imageCompressor extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            compressedLink:\r\n                \"http://navparivartan.in/wp-content/uploads/2018/11/placeholder.png\",\r\n            originalImage: \"\",\r\n            originalLink: \"\",\r\n            clicked: false,\r\n            uploadImage: false\r\n        };\r\n    }\r\n\r\n    handle = e => {\r\n        const imageFile = e.target.files[0];\r\n        this.setState({\r\n            originalLink: URL.createObjectURL(imageFile),\r\n            originalImage: imageFile,\r\n            outputFileName: imageFile.name,\r\n            uploadImage: true\r\n        });\r\n    };\r\n\r\n    changeValue = e => {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    };\r\n\r\n    click = e => {\r\n        e.preventDefault();\r\n\r\n        const options = {\r\n            maxSizeMB: 1,\r\n            maxWidthOrHeight: 500,\r\n            useWebWorker: true\r\n        };\r\n\r\n        if (options.maxSizeMB >= this.state.originalImage.size / 1024) {\r\n            alert(\"Image is too small, can't be Compressed!\");\r\n            return 0;\r\n        }\r\n\r\n        let output;\r\n        imageCompression(this.state.originalImage, options).then(x => {\r\n            output = x;\r\n\r\n            const downloadLink = URL.createObjectURL(output);\r\n            this.setState({\r\n                compressedLink: downloadLink\r\n            });\r\n        });\r\n\r\n        this.setState({ clicked: true });\r\n        return 1;\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"m-5 back\">\r\n                <div className=\"text-dark text-center\">\r\n                    <h1>Three Simple Steps</h1>\r\n                    <h3>1. Upload Image</h3>\r\n                    <h3>2. Click on Compress</h3>\r\n                    <h3>3. Download Compressed Image</h3>\r\n                </div>\r\n\r\n                <div className=\"row mt-5\">\r\n                    <div className=\"col-xl-4 col-lg-4 col-md-12 col-sm-12\">\r\n                        {this.state.uploadImage ? (\r\n                            <Card.Img\r\n                                className=\"ht\"\r\n                                variant=\"top\"\r\n                                src={this.state.originalLink}\r\n                            ></Card.Img>\r\n                        ) : (\r\n                                <Card.Img\r\n                                    className=\"ht\"\r\n                                    variant=\"top\"\r\n                                    src=\"http://navparivartan.in/wp-content/uploads/2018/11/placeholder.png\"\r\n                                ></Card.Img>\r\n                            )}\r\n                        <div className=\"d-flex justify-content-center\">\r\n                            <input\r\n                                type=\"file\"\r\n                                accept=\"image/*\"\r\n                                className=\"mt-2 btn btn-dark w-75\"\r\n                                onChange={e => this.handle(e)}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-xl-4 col-lg-4 col-md-12 mb-5 mt-5 col-sm-12 d-flex justify-content-center align-items-baseline\">\r\n                        <br />\r\n                        {this.state.outputFileName ? (\r\n                            <button\r\n                                type=\"button\"\r\n                                className=\" btn btn-dark\"\r\n                                onClick={e => this.click(e)}\r\n                            >\r\n                                Compress\r\n                            </button>\r\n                        ) : (\r\n                                <></>\r\n                            )}\r\n                    </div>\r\n\r\n                    <div className=\"col-xl-4 col-lg-4 col-md-12 col-sm-12 mt-3\">\r\n                        <Card.Img variant=\"top\" src={this.state.compressedLink}></Card.Img>\r\n                        {this.state.clicked ? (\r\n                            <div className=\"d-flex justify-content-center\">\r\n                                <a\r\n                                    href={this.state.compressedLink}\r\n                                    download={this.state.outputFileName}\r\n                                    className=\"mt-2 btn btn-dark w-75\"\r\n                                >\r\n                                    Download\r\n                </a>\r\n                            </div>\r\n                        ) : (\r\n                                <></>\r\n                            )}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\n\nimport ImageCompressor from \"./component/ImageCompressor\";\n\nconst App = () => <ImageCompressor />;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}